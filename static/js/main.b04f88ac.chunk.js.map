{"version":3,"sources":["Piece.js","BoardCell.js","JunqiGame.js","App.js","reportWebVitals.js","index.js"],"names":["enPieceNameMap","colorMap","Piece","props","piece","this","className","color","isSelected","rank","React","Component","BoardCell","renderedPiece","shape","cell","svgClassName","type","width","height","rx","ry","strokeWidth","fill","stroke","r","cx","cy","isInLastPath","onClick","cellClicked","id","oppositeColorMap","leftColorMap","rightColorMap","DEFAULT_BOARD_WIDTH","railOuterColor","railInnerColor","JunqiGame","formationCells","edges","defaultFormation","pieceIdx","addEdges","cell1","cell2","Set","add","i","j","isOnRailroad","numRows","numCols","forEach","idxs","state","cells","railPaths","playerId","ownColor","currentTurnColor","lastMovePath","roadsDrawn","selectedCell","isConnected","ws","board","canvas","arrowCanvas","setBoardRef","element","setCanvasRef","setArrowCanvasRef","bind","drawRoads","formationCellClicked","joinGame","clickedCell","isCellPieceSelectable","isOwnPiece","setState","console","log","send","JSON","stringify","data","srcCellId","destCellId","srcRow","parseInt","clickedRow","prevState","srcCell","destCell","parents","Map","queue","visited","length","n","shift","neighbours","set","path","curr","unshift","get","has","push","getRailPath","find","includes","idx1","findIndex","idx2","startIdx","Math","min","endIdx","max","piece1","piece2","selectedCellId","selectedPiece","comparePieces","lastMove","renderedSides","classNameMap","dir","renderedCells","idxOrder","idx","ctx","isRail","defaultWidth","boardRect","getBoundingClientRect","elem1","document","getElementById","elem2","rect1","rect2","x1","left","right","y1","top","bottom","x2","y2","beginPath","strokeStyle","lineWidth","setLineDash","moveTo","lineTo","offsetWidth","offsetHeight","arcTo","fromX","fromY","toX","toY","arrowX","arrowY","angle","atan2","PI","angle1","angle2","topX","cos","topY","sin","botX","botY","getContext","style","clearRect","currCellId","nextCellId","headlen","offset","abs","addedEdges","curvedEdges","leftColor","rightColor","topColor","corners1","corners2","createArcRail","createLineBetweenCells","prevProps","drawLastMovePath","drawFormationRoads","fetch","method","credentials","then","res","json","WebSocket","formation","cellId","onopen","event","gameType","onmessage","parse","gameResult","isFinished","winners","alert","playerColors","close","k","Object","keys","getLastMovePath","cellStates","moveHistory","renderFormationCells","ref","position","pointerEvents","topSide","renderTopCells","renderLeftBottomRightCells","leftSide","bottomSide","rightSide","center","renderCenterCells","zIndex","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b04f88ac.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Piece.css'; \r\n\r\nconst pieceNameMap = {\r\n    0: \"军旗\",\r\n    1: \"工兵\",\r\n    2: \"排长\",\r\n    3: \"连长\",\r\n    4: \"营长\",\r\n    5: \"团长\",\r\n    6: \"旅长\",\r\n    7: \"师长\",\r\n    8: \"军长\",\r\n    9: \"司令\",\r\n    10: \"炸弹\",\r\n    100: \"地雷\",\r\n}\r\n\r\nconst enPieceNameMap = {\r\n    0: \"🚩\",\r\n    1: \"1\",\r\n    2: \"2\",\r\n    3: \"3\",\r\n    4: \"4\",\r\n    5: \"5\",\r\n    6: \"6\",\r\n    7: \"7\",\r\n    8: \"8\",\r\n    9: \"9\",\r\n    10: \"💣\",\r\n    100: \"Mine\",\r\n}\r\n\r\nlet colorMap = {\r\n    'O': 'orange',\r\n    'B': 'blue',\r\n    'G': \"green\",\r\n    'P': 'purple'\r\n}\r\n\r\nexport default class Piece extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        let isEn = true;\r\n        let piece = this.props.piece;\r\n        let className = `piece ${colorMap[piece.color]}`;\r\n        if (this.props.isSelected) {\r\n            className += \" selected\";\r\n        }\r\n        if(isEn){\r\n            className += \" en\";\r\n        }\r\n\r\n        return <div className={className}>{piece.rank != null && enPieceNameMap[piece.rank]}</div>\r\n    }\r\n}","import React from 'react';\r\nimport './BoardCell.css'; \r\nimport Piece from './Piece';\r\n\r\nexport default class BoardCell extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        let renderedPiece;\r\n        let cell = this.props.cell;\r\n        let piece = cell.piece;\r\n\r\n        if (piece) {\r\n            renderedPiece = <Piece piece={piece} isSelected={this.props.isSelected}></Piece>\r\n        }\r\n\r\n        let shape;\r\n        let svgClassName = \"cell-svg\";\r\n        if (cell.type === \"normal\") {\r\n            shape = <rect width=\"100%\" height=\"100%\"rx=\"4px\" ry=\"4px\" strokeWidth=\"4px\" fill=\"rgb(65,68,37)\" stroke=\"rgb(104,144,176)\"/>;\r\n        } else if (cell.type === \"camp\") {\r\n            shape = <circle r=\"60%\" cx=\"50%\" cy=\"50%\" strokeWidth=\"4px\" fill=\"rgb(65,68,37)\" stroke=\"rgb(192,144,88)\"/>;\r\n        } else if (cell.type === \"base\") {\r\n            shape = <circle r=\"40%\" cx=\"50%\" cy=\"50%\" strokeWidth=\"4px\" fill=\"rgb(65,68,37)\" stroke=\"rgb(144,180,104)\"/>;\r\n        } else if (cell.type === \"center\") {\r\n            shape = <rect width=\"100%\" height=\"100%\" rx=\"4px\" ry=\"4px\" strokeWidth=\"4px\" fill=\"rgb(65,68,37)\" stroke=\"rgb(104,144,176)\"/>;\r\n            svgClassName += \" center-svg\";\r\n        }\r\n\r\n        let containerClassName = \"cell-container\";\r\n        // console.log(this.props.isInLastPath);\r\n        if (this.props.isInLastPath) {\r\n            // containerClassName += \" in-last-move\";\r\n        }\r\n\r\n        return (\r\n            <div className={containerClassName} onClick={()=>this.props.cellClicked(cell)}>\r\n                {renderedPiece || cell.id}\r\n                <svg id={cell.id} className={svgClassName}>\r\n                    {shape}\r\n                </svg>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './JunqiGame.css'; \r\nimport BoardCell from './BoardCell';\r\n\r\nconst oppositeColorMap = {\r\n    'O': 'G',\r\n    'B': 'P',\r\n    'G': 'O',\r\n    'P': 'B'\r\n};\r\n\r\nconst leftColorMap = {\r\n    'O': 'B',\r\n    'B': 'G',\r\n    'G': 'P',\r\n    'P': 'O'\r\n};\r\n\r\nconst rightColorMap = {\r\n    'O': 'P',\r\n    'B': 'O',\r\n    'G': 'B',\r\n    'P': 'G'\r\n};\r\n\r\nconst DEFAULT_BOARD_WIDTH = 834;\r\nconst DEFAULT_FORMATION_WIDTH = 281;\r\n\r\nconst railOuterColor = \"rgb(104,144,176)\";\r\nconst railInnerColor = \"rgb(200,236,240)\";\r\n\r\nexport default class JunqiGame extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n\r\n        let formationCells = {};\r\n        let edges = {};\r\n        let defaultFormation = [9,1,6,3,3,5,6,7,8,1,7,10,4,2,3,5,1,2,100,10,2,100,100,0,4];\r\n        // let defaultFormation = [9,9,9,9,9,9,9,1,1,1,9,10,1,1,1,9,9,9,100,10,9,100,100,0,4];\r\n        let numRows = 6;\r\n        let numCols = 5;\r\n        let pieceIdx = 0;\r\n        let addEdges = (edges, cell1, cell2) => {\r\n            if (edges[cell1] == null) {\r\n                edges[cell1] = new Set();\r\n            }\r\n            edges[cell1].add(cell2);\r\n            if (edges[cell2] == null) {\r\n                edges[cell2] = new Set();\r\n            }\r\n            edges[cell2].add(cell1);\r\n        }\r\n\r\n        for (let i = 0; i < numRows; i++) {\r\n            for (let j = 0; j < numCols; j++) {\r\n                let id = `F${i}${j}`;\r\n                let type;\r\n                if (((i === 1 || i === 3) && (j === 1 || j === 3))|| (i=== 2 && j === 2)) {\r\n                    type = 'camp';\r\n                } else if (i === 5 && (j === 1 || j === 3)) {\r\n                    type = 'base';\r\n                } else {\r\n                    type = 'normal';\r\n                }\r\n                let isOnRailroad = i === 0 || i === 4 || ((j === 0 || j === 4) && i !== 5);\r\n                let piece = null;\r\n                if (type !== 'camp') {\r\n                    piece = {color: 'O', rank: defaultFormation[pieceIdx]};\r\n                    pieceIdx++;\r\n                }\r\n\r\n                let cell = {\r\n                    id, piece, type, isOnRailroad\r\n                };\r\n                formationCells[id] = cell;\r\n\r\n                // add edges\r\n                if (i > 0) {\r\n                    addEdges(edges, id, `F${i-1}${j}`);\r\n                }\r\n                if (i < numRows - 1) {\r\n                    addEdges(edges, id, `F${i+1}${j}`);\r\n                }\r\n                if (j > 0) {\r\n                    addEdges(edges, id, `F${i}${j-1}`);\r\n                }\r\n                if (j < numCols - 1) {\r\n                    addEdges(edges, id, `F${i}${j+1}`);\r\n                }\r\n                if (type === 'camp') {\r\n                    [[i-1,j-1],[i-1,j+1],[i+1,j-1],[i+1,j+1]].forEach(idxs => addEdges(edges, id, `F${idxs[0]}${idxs[1]}`));\r\n                }\r\n            }\r\n        }\r\n\r\n        this.state = {\r\n            cells: null,\r\n            edges: null,\r\n            railPaths: null,\r\n            playerId: null,\r\n            ownColor: null,\r\n            currentTurnColor: null,\r\n            lastMovePath: [],\r\n            formationCells: formationCells,\r\n            roadsDrawn: false,\r\n            selectedCell: null,\r\n            isConnected: false,\r\n            ws: null\r\n        };\r\n\r\n        this.board = null;\r\n        this.canvas = null;\r\n        this.arrowCanvas = null;\r\n\r\n        this.setBoardRef = element => {\r\n            this.board = element;\r\n        };\r\n\r\n        this.setCanvasRef = element => {\r\n            this.canvas = element;\r\n        };\r\n\r\n        this.setArrowCanvasRef = element => {\r\n            this.arrowCanvas = element;\r\n        }\r\n\r\n        this.cellClicked = this.cellClicked.bind(this);\r\n        this.drawRoads = this.drawRoads.bind(this);\r\n        this.formationCellClicked = this.formationCellClicked.bind(this);\r\n        this.joinGame = this.joinGame.bind(this);\r\n    }\r\n\r\n    cellClicked(clickedCell) {\r\n        const isCellPieceSelectable = cell => {\r\n            return cell.type !== \"base\" && cell.piece && cell.piece.rank !== 100 && this.isOwnPiece(cell.piece) && this.state.currentTurnColor === this.state.ownColor;\r\n        };\r\n\r\n        if (this.state.selectedCell) {\r\n            let selectedCell = this.state.selectedCell;\r\n\r\n            if (clickedCell.id === selectedCell.id) {\r\n                this.setState({selectedCell: null});\r\n                return;\r\n            }\r\n\r\n            if (this.isOwnPiece(clickedCell.piece)) {\r\n                if (isCellPieceSelectable(clickedCell)) {\r\n                    this.setState({selectedCell: clickedCell});\r\n                }\r\n            } else {\r\n\r\n                // let isValidMove = this.isValidMove(clickedCell);\r\n                // if (isValidMove) {\r\n                //     console.log(\"valid\");\r\n                //     this.moveSelectedPieceToCell(clickedCell);\r\n                //     this.setState({selectedCell: null});\r\n                //     return;\r\n                // }\r\n\r\n                console.log('send');\r\n                this.state.ws.send(JSON.stringify({\r\n                    type: \"move\",\r\n                    data: {\r\n                        srcCellId: this.state.selectedCell.id,\r\n                        destCellId: clickedCell.id\r\n                    }\r\n                }));\r\n            }\r\n        } else {\r\n            if (isCellPieceSelectable(clickedCell)) {\r\n                this.setState({selectedCell: clickedCell});\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    formationCellClicked(clickedCell) {\r\n        if (this.state.selectedCell) {\r\n            let selectedCell = this.state.selectedCell;\r\n\r\n            if (clickedCell.id === selectedCell.id) {\r\n                this.setState({selectedCell: null});\r\n                return;\r\n            }\r\n            if (clickedCell.type === \"camp\") {\r\n                return;\r\n            }\r\n\r\n            let srcRow = parseInt(selectedCell.id[1]);\r\n            let clickedRow = parseInt(clickedCell.id[1]);\r\n            if ((selectedCell.piece.rank === 10 && clickedRow === 0) || (clickedCell.piece.rank === 10 && srcRow === 0)) {\r\n                return;\r\n            }\r\n\r\n            if ((selectedCell.piece.rank === 100 && clickedRow < 4) || (clickedCell.piece.rank === 100 && srcRow < 4)) {\r\n                return;\r\n            }\r\n\r\n            if ((selectedCell.piece.rank === 0 && clickedCell.type !== 'base') || (clickedCell.piece.rank === 0 && selectedCell.type !== 'base')) {\r\n                return;\r\n            }\r\n\r\n            let tmpPiece = selectedCell.piece\r\n            let newFormation = {...this.state.formationCells,\r\n                [selectedCell.id]: {...this.state}\r\n\r\n            }\r\n\r\n            this.setState(prevState => {\r\n                let selectedPiece = selectedCell.piece\r\n                let formationCells = {...prevState.formationCells,\r\n                    [selectedCell.id]: {...prevState.formationCells[selectedCell.id], piece: clickedCell.piece},\r\n                    [clickedCell.id]: {...prevState.formationCells[clickedCell.id], piece: selectedCell.piece}\r\n                }\r\n    \r\n                return {selectedCell: null, formationCells};\r\n            });\r\n\r\n        } else {\r\n            this.setState({selectedCell: clickedCell});\r\n        }\r\n    }\r\n\r\n    isOwnPiece(piece) {\r\n        return piece && piece.color === this.state.ownColor;\r\n    }\r\n\r\n    // use dfs to find path for engineer\r\n    getRailPath(cells, edges, srcCell, destCell) {\r\n        if (!srcCell.isOnRailroad || !destCell.isOnRailroad) {\r\n            return null;\r\n        }\r\n\r\n        let parents = new Map();\r\n        let queue = [srcCell];\r\n        let visited = new Set([srcCell.id]);\r\n        while (queue.length) {\r\n            let n = queue.shift();\r\n\r\n            let neighbours = edges[n.id];\r\n            for (let id of neighbours) {\r\n                if (id === destCell.id) {\r\n                    parents.set(id, n.id);\r\n                    let path = [];\r\n                    let curr = destCell.id;\r\n                    while (curr != null) {\r\n                        path.unshift(curr);\r\n                        curr = parents.get(curr);\r\n                    }\r\n                    console.log('asdfad', path, parents);\r\n                    return path;\r\n                }\r\n\r\n                let cell = cells[id];\r\n                if (cell.piece == null && cell.isOnRailroad && !visited.has(id)) {\r\n                    visited.add(id);\r\n                    queue.push(cell);\r\n                    parents.set(id, n.id);\r\n                }\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    isValidMove(destCell) {\r\n        let selectedCell = this.state.selectedCell;\r\n\r\n        if (selectedCell.id === destCell.id) {\r\n            return false;\r\n        }\r\n\r\n        if (destCell.piece && this.isOwnPiece(destCell.piece)) {\r\n            return false;\r\n        }\r\n\r\n\r\n        if (selectedCell.isOnRailroad && destCell.isOnRailroad) {\r\n            if (selectedCell.piece.rank === 1) {\r\n                return this.getRailPath(selectedCell, destCell) != null;\r\n            }\r\n\r\n            let railPaths = this.state.railPaths;\r\n            let path = railPaths.find(path => {\r\n                return path.includes(selectedCell.id) && path.includes(destCell.id);\r\n            });\r\n\r\n            if (!path) {\r\n                return false;\r\n            }\r\n\r\n            let idx1 = path.findIndex(id => id === selectedCell.id);\r\n            let idx2 = path.findIndex(id => id === destCell.id);\r\n            let startIdx = Math.min(idx1, idx2);\r\n            let endIdx = Math.max(idx1, idx2);\r\n            for (let i = startIdx + 1; i < endIdx; i++) {\r\n                let currCell = this.state.cells[path[i]];\r\n                if (currCell.piece != null) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        } else {\r\n            return this.state.edges[selectedCell.id].has(destCell.id);\r\n        }\r\n    }\r\n\r\n    comparePieces(piece1, piece2) {\r\n        // bomb or same rank\r\n        if (piece1.rank === 10 || piece2.rank === 10 || piece1.rank === piece2.rank) {\r\n            return null;\r\n        }\r\n\r\n        // engineer vs mine\r\n        if ((piece1.rank === 1 && piece2.rank === 100) || (piece1.rank === 100 && piece2.rank === 1)) {\r\n            return piece1.rank === 1 ? piece1 : piece2;\r\n        }\r\n\r\n        return piece1.rank > piece2.rank ? piece1 : piece2;\r\n    }\r\n\r\n    moveSelectedPieceToCell(destCell) {\r\n        this.setState(prevState => {\r\n            let selectedCellId = prevState.selectedCell.id;\r\n            let selectedPiece = prevState.selectedCell.piece;\r\n            let destCellId = destCell.id;\r\n            let cells = {...prevState.cells,\r\n                [selectedCellId]: {...prevState.cells[selectedCellId], piece: null}\r\n            };\r\n\r\n            if (destCell.piece == null || this.comparePieces(selectedPiece, destCell.piece) === selectedPiece) {\r\n                cells[destCellId] = {...prevState.cells[destCellId], piece: selectedPiece};\r\n            } else if (this.comparePieces(selectedPiece, destCell.piece) == null) {\r\n                cells[destCellId] = {...prevState.cells[destCellId], piece: null};\r\n            }\r\n\r\n            return {selectedCell: null, cells};\r\n        });\r\n    }\r\n\r\n    getLastMovePath(cells,edges, lastMove) {\r\n        if (!lastMove) {\r\n            return [];\r\n        }\r\n\r\n        let {color, srcCellId, destCellId} = lastMove;\r\n        let srcCell = cells[srcCellId];\r\n        let destCell = cells[destCellId];\r\n        console.log(srcCell, destCell);\r\n\r\n        if (srcCell.isOnRailroad && destCell.isOnRailroad) {\r\n            let path = this.getRailPath(cells, edges,srcCell, destCell);\r\n            console.log(path);\r\n            return path;\r\n        } else {\r\n            return [srcCellId, destCellId];\r\n        }\r\n\r\n    }\r\n\r\n    isSelected(cell) {\r\n        return this.state.selectedCell ? this.state.selectedCell.id === cell.id : false;\r\n    }\r\n\r\n    renderTopCells() {\r\n        let cells = [];\r\n        let numRows = 6;\r\n        let numCols = 5;\r\n\r\n        for (let i = numRows-1; i >= 0; i--) {\r\n            for (let j = numCols -1; j >= 0; j--) {\r\n                let cell = this.state.cells[`${oppositeColorMap[this.state.ownColor]}${i}${j}`];\r\n                \r\n                cells.push(\r\n                    <BoardCell key={cell.id} cell={cell} isSelected={this.isSelected(cell)} cellClicked={this.cellClicked}></BoardCell>\r\n                )\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"player-territory top-territory\">{cells}</div>\r\n            );\r\n     \r\n    }\r\n    \r\n    renderLeftBottomRightCells() {\r\n        let renderedSides = [];\r\n        let classNameMap = {\r\n            'W': \"player-territory left-territory\",\r\n            'S': \"player-territory bottom-territory\",\r\n            'E': \"player-territory right-territory\"\r\n        };\r\n\r\n        ['W', 'S', 'E'].forEach(dir => {\r\n            let renderedCells = [];\r\n            let numRows = 6;\r\n            let numCols = 5;\r\n            let color;\r\n            if (dir === 'W') {\r\n                color = leftColorMap[this.state.ownColor];\r\n            } else if (dir === 'E') {\r\n                color = rightColorMap[this.state.ownColor];\r\n            } else {\r\n                color = this.state.ownColor;\r\n            }\r\n\r\n            for (let i = 0; i < numRows; i++) {\r\n                for (let j = 0; j < numCols; j++) {\r\n                    let cell = this.state.cells[`${color}${i}${j}`];\r\n\r\n                    renderedCells.push(\r\n                        <BoardCell key={cell.id} cell={cell} isSelected={this.isSelected(cell)} cellClicked={this.cellClicked}></BoardCell>\r\n                    )\r\n                }\r\n            }\r\n            renderedSides.push(<div className={classNameMap[dir]}>{renderedCells}</div>);\r\n        });\r\n\r\n        return renderedSides;\r\n    }\r\n\r\n    renderCenterCells() {\r\n        let cells = [];\r\n        const idxOrderMap = {\r\n            'O': [0,1,2,3,4,5,6,7,8,],\r\n            'B': [2,5,8,1,4,7,0,3,6],\r\n            'G': [8,7,6,5,4,3,2,1,0],\r\n            'P': [6,3,0,7,4,1,8,5,2]\r\n        }\r\n        let idxOrder = idxOrderMap[this.state.ownColor];\r\n\r\n        for (let i = 0; i < 9; i++) {\r\n            let idx = idxOrder[i];\r\n            let cell = this.state.cells[`M${idx}`];\r\n            cells.push(\r\n                <BoardCell key={cell.id} cell={cell} isSelected={this.isSelected(cell)} cellClicked={this.cellClicked}></BoardCell>\r\n            )\r\n            if (i === 2 || i === 5) {\r\n                for (let j = 0; j < 5; j++) {\r\n                    cells.push(<div key={`blank${idx}${j}`}></div>);\r\n                }\r\n            } else if (i !== 8) {\r\n                cells.push(<div key={`blank${idx}`}></div>);\r\n            }\r\n\r\n        }\r\n\r\n        return (\r\n            <div className=\"center-territory\">{cells}</div>\r\n        )\r\n    }\r\n\r\n    renderFormationCells() {\r\n\r\n        let renderedCells = [];\r\n        let numRows = 6;\r\n        let numCols = 5;\r\n\r\n        for (let i = 0; i < numRows; i++) {\r\n            for (let j = 0; j < numCols; j++) {\r\n                let cell = this.state.formationCells[`F${i}${j}`];\r\n\r\n                renderedCells.push(\r\n                    <BoardCell key={cell.id} cell={cell} isSelected={this.isSelected(cell)} cellClicked={this.formationCellClicked}></BoardCell>\r\n                )\r\n            }\r\n        }\r\n        return <div className=\"player-territory\">{renderedCells}</div>\r\n\r\n\r\n    }\r\n\r\n    createLineBetweenCells(ctx, cell1, cell2, isRail, defaultWidth) {\r\n        let boardRect = this.board.getBoundingClientRect();\r\n        let elem1 = document.getElementById(cell1);\r\n        let elem2 = document.getElementById(cell2);\r\n        let rect1 = elem1.getBoundingClientRect();\r\n        let rect2 = elem2.getBoundingClientRect();\r\n        let x1 = (rect1.left + rect1.right)/2 - boardRect.left;\r\n        let y1 = (rect1.top + rect1.bottom)/2 - boardRect.top;\r\n        let x2 = (rect2.left + rect2.right)/2 - boardRect.left;\r\n        let y2 = (rect2.top + rect2.bottom)/2 - boardRect.top;\r\n\r\n        if (!isRail) {\r\n\r\n            ctx.beginPath();        \r\n            ctx.strokeStyle = \"rgb(144,180,104)\";\r\n            ctx.lineWidth = 3 * (boardRect.width/defaultWidth);\r\n            ctx.setLineDash([]);\r\n            ctx.moveTo(x1,y1);\r\n            ctx.lineTo(x2,y2);\r\n            ctx.stroke();\r\n        } else {\r\n\r\n            ctx.beginPath();        \r\n            ctx.strokeStyle = railOuterColor;\r\n            ctx.lineWidth = 10 * (boardRect.width/defaultWidth);\r\n            ctx.setLineDash([]);\r\n            ctx.moveTo(x1,y1);\r\n            ctx.lineTo(x2,y2);\r\n            ctx.stroke();\r\n\r\n            ctx.beginPath();\r\n            ctx.strokeStyle = railInnerColor;\r\n            ctx.lineWidth = 5 * (boardRect.width/defaultWidth);\r\n            ctx.setLineDash([2,2]);\r\n            ctx.moveTo(x1,y1);\r\n            ctx.lineTo(x2,y2);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n\r\n    createArcRail(ctx, cell1, cell2) {\r\n        let boardRect = this.board.getBoundingClientRect();\r\n        let elem1 = document.getElementById(cell1);\r\n        let elem2 = document.getElementById(cell2);\r\n        let rect1 = elem1.getBoundingClientRect();\r\n        let rect2 = elem2.getBoundingClientRect();\r\n        let x1 = (rect1.left + rect1.right)/2 - boardRect.left;\r\n        let y1 = (rect1.top + rect1.bottom)/2 - boardRect.top;\r\n        let x2 = (rect2.left + rect2.right)/2 - boardRect.left;\r\n        let y2 = (rect2.top + rect2.bottom)/2 - boardRect.top;\r\n        console.log(this.board.offsetWidth, this.board.offsetHeight);\r\n        ctx.beginPath();        \r\n        ctx.strokeStyle = railOuterColor;\r\n        ctx.lineWidth = 10 * (boardRect.width/DEFAULT_BOARD_WIDTH);\r\n        ctx.setLineDash([]);\r\n        ctx.moveTo(x1,y1);\r\n        ctx.arcTo(x1, y2, x2, y2, 60* (boardRect.width/DEFAULT_BOARD_WIDTH));\r\n        ctx.stroke();\r\n\r\n\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = railInnerColor;\r\n        ctx.lineWidth = 5 * (boardRect.width/DEFAULT_BOARD_WIDTH);\r\n        ctx.setLineDash([2,2]);\r\n        ctx.moveTo(x1,y1);\r\n        ctx.arcTo(x1, y2, x2, y2, 60 * (boardRect.width/DEFAULT_BOARD_WIDTH));\r\n        ctx.stroke();\r\n    }\r\n\r\n    drawArrowHead(ctx, fromX, fromY, toX, toY) {\r\n        let headlen = 10;\r\n        let theta = 45;\r\n        let arrowX, arrowY;//Arrow line end point coordinates\r\n\r\n        let angle = Math.atan2(fromY - toY, fromX - toX) * 180 / Math.PI;\r\n        let angle1 = (angle + theta) * Math.PI / 180;\r\n        let angle2 = (angle - theta) * Math.PI / 180;\r\n        let topX = headlen * Math.cos(angle1);\r\n        let topY = headlen * Math.sin(angle1);\r\n        let botX = headlen * Math.cos(angle2);\r\n        let botY = headlen * Math.sin(angle2);\r\n        ctx.beginPath();\r\n        // draw a straight line\r\n        // ctx.moveTo(fromX, fromY);\r\n        // ctx.lineTo(toX, toY);\r\n    \r\n        arrowX = toX + topX;\r\n        arrowY = toY + topY;\r\n        //Draw the upper arrow line\r\n        ctx.moveTo(arrowX, arrowY);\r\n        ctx.lineTo(toX, toY);\r\n    \r\n        arrowX = toX + botX;\r\n        arrowY = toY + botY;\r\n        //Draw the arrow line below\r\n        ctx.lineTo(arrowX, arrowY);\r\n    \r\n        ctx.lineWidth = \"4\";\r\n        ctx.strokeStyle = \"rgb(208,180,24)\";\r\n        ctx.stroke();\r\n    }\r\n\r\n    drawLastMovePath(lastMovePath) {\r\n        if (lastMovePath) {\r\n            let boardRect = this.board.getBoundingClientRect();\r\n            let ctx = this.arrowCanvas.getContext(\"2d\");\r\n            this.arrowCanvas.style.width = '100%';\r\n            this.arrowCanvas.style.height = '100%';\r\n            this.arrowCanvas.width  = this.arrowCanvas.offsetWidth;\r\n            this.arrowCanvas.height = this.arrowCanvas.offsetHeight;\r\n            ctx.clearRect(0, 0, this.arrowCanvas.width, this.arrowCanvas.height);\r\n            for (let i = 0; i < lastMovePath.length - 1; i++) {\r\n                console.log('drawwing')\r\n                let currCellId = lastMovePath[i];\r\n                let nextCellId = lastMovePath[i+1];\r\n                let elem1 = document.getElementById(currCellId);\r\n                let elem2 = document.getElementById(nextCellId);\r\n                console.log(elem1, elem2);\r\n                let rect1 = elem1.getBoundingClientRect();\r\n                let rect2 = elem2.getBoundingClientRect();\r\n                let x1 = (rect1.left + rect1.right)/2 - boardRect.left;\r\n                let y1 = (rect1.top + rect1.bottom)/2 - boardRect.top;\r\n                let x2 = (rect2.left + rect2.right)/2 - boardRect.left;\r\n                let y2 = (rect2.top + rect2.bottom)/2 - boardRect.top;\r\n                // this.drawArrowHead(ctx,x1-(x2-x1),y1 -(y2-y1),x1,y1);\r\n\r\n                let headlen = 10 * (boardRect.width/DEFAULT_BOARD_WIDTH);\r\n                console.log('head',headlen);\r\n\r\n                let theta = 45;\r\n                let arrowX, arrowY;//Arrow line end point coordinates\r\n                console.log(x2,x1, y2,y1);\r\n                let offset = headlen * Math.cos(theta) / 2;\r\n\r\n                let fromX = x1 - (x2-x1);\r\n                let fromY = y1 - (y2-y1);\r\n                let toX = x1;\r\n                let toY = y1;\r\n\r\n                if (Math.abs(toX-fromX) > 1) {\r\n                    toX += x2 > x1 ? offset: -offset;\r\n                }\r\n                if (Math.abs(toY-fromY) > 1) {\r\n                    toY += y2 > y1 ? offset: -offset;\r\n                }\r\n\r\n                let angle = Math.atan2(fromY - toY, fromX - toX) * 180 / Math.PI;\r\n                let angle1 = (angle + theta) * Math.PI / 180;\r\n                let angle2 = (angle - theta) * Math.PI / 180;\r\n                let topX = headlen * Math.cos(angle1);\r\n                let topY = headlen * Math.sin(angle1);\r\n                let botX = headlen * Math.cos(angle2);\r\n                let botY = headlen * Math.sin(angle2);\r\n                ctx.beginPath();\r\n                // draw a straight line\r\n                // ctx.moveTo(fromX, fromY);\r\n                // ctx.lineTo(toX, toY);\r\n            \r\n                arrowX = toX + topX;\r\n                arrowY = toY + topY;\r\n                //Draw the upper arrow line\r\n                ctx.moveTo(arrowX, arrowY);\r\n                ctx.lineTo(toX, toY);\r\n            \r\n                arrowX = toX + botX;\r\n                arrowY = toY + botY;\r\n                //Draw the arrow line below\r\n                ctx.lineTo(arrowX, arrowY);\r\n            \r\n                ctx.lineWidth = 4 * (boardRect.width/DEFAULT_BOARD_WIDTH);\r\n                console.log(4 * (boardRect.width/DEFAULT_BOARD_WIDTH));\r\n                ctx.strokeStyle = \"rgb(208,180,24)\";\r\n                ctx.stroke();\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    drawRoads() {\r\n        this.canvas.style.width = '100%';\r\n        this.canvas.style.height = '100%';\r\n        this.canvas.width  = this.canvas.offsetWidth;\r\n        this.canvas.height = this.canvas.offsetHeight;\r\n        let ctx = this.canvas.getContext(\"2d\");\r\n\r\n        let addedEdges = new Set();\r\n        let curvedEdges = new Set();\r\n        \r\n        let ownColor = this.state.ownColor;\r\n        let leftColor = leftColorMap[ownColor];\r\n        let rightColor = rightColorMap[ownColor];\r\n        let topColor = oppositeColorMap[ownColor];\r\n\r\n        let corners1 = [`${ownColor}00`, `${topColor}04`, `${topColor}00`, `${ownColor}04`];\r\n        let corners2 = [`${leftColor}04`, `${leftColor}00`, `${rightColor}04`, `${rightColor}00`];\r\n        for (let i = 0 ; i < 4; i++) {\r\n            let cell1 = corners1[i];\r\n            let cell2 = corners2[i];\r\n            curvedEdges.add(`${cell1}${cell2}`);\r\n            curvedEdges.add(`${cell2}${cell1}`);\r\n            this.createArcRail(ctx, cell1, cell2);\r\n        }\r\n\r\n        for (let cell1 in this.state.edges) {\r\n            let edges = this.state.edges[cell1];\r\n            edges.forEach(cell2 => {\r\n                if (!curvedEdges.has(`${cell1}${cell2}`) && !addedEdges.has(`${cell2}${cell1}`)) {\r\n                    let cells = this.state.cells;\r\n                    let isRail = cells[cell1].isOnRailroad && cells[cell2].isOnRailroad;\r\n                    this.createLineBetweenCells(ctx, cell1, cell2, isRail, DEFAULT_BOARD_WIDTH)\r\n                    addedEdges.add(`${cell1}${cell2}`)\r\n                }\r\n            });\r\n        }\r\n\r\n        this.setState({roadsDrawn: true});\r\n    }\r\n\r\n    drawFormationRoads() {\r\n        this.canvas.style.width = '100%';\r\n        this.canvas.style.height = '100%';\r\n        this.canvas.width  = this.canvas.offsetWidth;\r\n        this.canvas.height = this.canvas.offsetHeight;\r\n        let ctx = this.canvas.getContext(\"2d\");\r\n\r\n        let addedEdges = new Set();\r\n        console.log('draw')\r\n\r\n        for (let cell1 in this.state.edges) {\r\n            let edges = this.state.edges[cell1];\r\n            edges.forEach(cell2 => {\r\n                if (!addedEdges.has(`${cell2}${cell1}`)) {\r\n                    let cells = this.state.formationCells;\r\n                    let isRail = cells[cell1].isOnRailroad && cells[cell2].isOnRailroad;\r\n                    this.createLineBetweenCells(ctx, cell1, cell2, isRail, DEFAULT_FORMATION_WIDTH);\r\n                    addedEdges.add(`${cell1}${cell2}`)\r\n                }\r\n            });\r\n        }\r\n\r\n        this.setState({roadsDrawn: true});\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.state.isConnected && !prevState.isConnected && !this.state.roadsDrawn) {\r\n            this.drawRoads();\r\n        }\r\n        if (this.state.isConnected && prevState.lastMovePath !== this.state.lastMovePath) {\r\n            this.drawLastMovePath(this.state.lastMovePath);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.drawFormationRoads();\r\n    }\r\n\r\n    joinGame(type) {\r\n        fetch('https://junqi-server.herokuapp.com/connect', {method: 'POST', credentials: 'include'}).then(res => {\r\n            return res.json();\r\n        }).then(data => {\r\n            let playerId = data.playerId;\r\n            const ws = new WebSocket('wss://junqi-server.herokuapp.com');\r\n\r\n\r\n            let formation = [];\r\n            for (let cellId in this.state.formationCells) {\r\n                let cell = this.state.formationCells[cellId];\r\n                if (cell.piece) {\r\n                    formation.push(cell.piece.rank);\r\n                }\r\n            }\r\n\r\n            ws.onopen = event => {\r\n                ws.send(JSON.stringify({\r\n                    type: 'join',\r\n                    data: {gameType: type, formation}\r\n                }));\r\n                console.log('sending', 'ugh');\r\n            };\r\n\r\n            ws.onmessage = event => {\r\n                let {type, data} = JSON.parse(event.data);\r\n                if (type === \"gamestate\") {\r\n                    if (data.gameResult.isFinished) {\r\n                        if (data.gameResult.winners.length) {\r\n                            alert(data.gameResult.winners.includes(data.playerColors[playerId]) ? \"you win :V\" : \"you lose :v\");\r\n                        } else {\r\n                            alert(\"draw\");\r\n                        }\r\n\r\n                        this.state.ws.close();\r\n\r\n                        this.setState({\r\n                            cells: null,\r\n                            edges: null,\r\n                            railPaths: null,\r\n                            playerId: null,\r\n                            ownColor: null,\r\n                            currentTurnColor: null,\r\n                            lastMovePath: [],\r\n                            roadsDrawn: false,\r\n                            selectedCell: null,\r\n                            isConnected: false,\r\n                            ws: null\r\n                        });\r\n                    } else {\r\n                        let edges = {};\r\n                        if (this.state.edges == null) {\r\n                            for (let k in data.board.edges) {\r\n                                edges[k] = new Set(Object.keys(data.board.edges[k]));\r\n                            }\r\n                        } else {\r\n                            edges = this.state.edges;\r\n                        }\r\n\r\n                        let lastMovePath = this.getLastMovePath(data.board.cellStates, edges, data.moveHistory[data.moveHistory.length - 1]);\r\n                        this.setState({\r\n                            playerId,\r\n                            cells: data.board.cellStates,\r\n                            edges: edges,\r\n                            railPaths: data.board.railPaths,\r\n                            ownColor: data.playerColors[playerId],\r\n                            currentTurnColor: data.currentTurnColor,\r\n                            lastMovePath: lastMovePath,\r\n                            isConnected: true,\r\n                            roadsDrawn: false,\r\n                            selectedCell: null,\r\n                            ws\r\n                        });\r\n                    }\r\n                } else if (type === \"invalidmove\") {\r\n                    console.log(\"invalid move\");\r\n                }\r\n\r\n            };\r\n\r\n            this.setState({ws});\r\n        }); \r\n\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.isConnected) {\r\n            let formationCells = this.renderFormationCells();\r\n            return (\r\n            <div className=\"lobby-container\">\r\n                <div className=\"button-container\">\r\n                    <button onClick={()=>this.joinGame(\"normal\")}>Four player game</button>\r\n                    <button onClick={()=>this.joinGame(\"onevsai\")}>Single player game</button>\r\n                    <button onClick={()=>this.joinGame(\"twoplayer\")}>Two player game</button>\r\n                </div>\r\n                <div className=\"formation-container\" ref={this.setBoardRef}>\r\n                    {formationCells}\r\n                    <canvas ref={this.setCanvasRef} style={{position:\"absolute\", top:0, left: 0, pointerEvents: 'none'}}></canvas>\r\n                </div>\r\n            </div>);\r\n        }\r\n        let topSide = this.renderTopCells();\r\n        let [leftSide, bottomSide, rightSide] = this.renderLeftBottomRightCells();\r\n        let center = this.renderCenterCells();\r\n        return ( \r\n            <div className=\"board-container\">\r\n                <div className=\"board\" ref={this.setBoardRef}>\r\n                    <div className=\"top-container\">{topSide}</div>\r\n                    <div className=\"middle-container\">{leftSide}{center}{rightSide}</div>\r\n                    <div className=\"bottom-container\">{bottomSide}</div>\r\n                    <canvas ref={this.setCanvasRef} style={{position:\"absolute\", top:0, left: 0, pointerEvents: 'none'}}></canvas>\r\n                    <canvas ref={this.setArrowCanvasRef} style={{position:\"absolute\", top:0, left: 0, zIndex:2, pointerEvents: 'none'}}></canvas>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import JunqiGame from './JunqiGame';\r\n\r\nfunction App() {\r\n  return (\r\n      <JunqiGame></JunqiGame>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}